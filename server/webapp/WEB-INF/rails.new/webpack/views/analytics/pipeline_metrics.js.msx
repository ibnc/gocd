/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function() {
  "use strict";

  const m = require("mithril");
  const $ = require("jquery");
  const _ = require('lodash');

  require("foundation-sites");
  require('helpers/server_health_messages_helper');
  const PluginEndpoint           = require('rails-shared/plugin-endpoint');
  const PluginiFrameWidget       = require('views/analytics/plugin_iframe_widget');
  const Frame                    = require('models/analytics/frame');
  const Routes                   = require('gen/js-routes');

  PluginEndpoint.ensure();

  const frames = {};

  const PipelineMetrics = function() {
    let currentPipeline = null;
    function oninit(vnode) {
      currentPipeline = vnode.attrs.model.data[0];
    }
    function view(vnode) { // eslint-disable-line no-unused-vars
      let x = _.map(vnode.attrs.model.data, function(pipeline) {
        if (pipeline == currentPipeline) {
          return (<option selected>{pipeline}</option>);
        } else {
          return (<option>{pipeline}</option>);
        }
      });
      let pluginId = "com.thoughtworks.gocd.analytics";
      const uid = `f-${pluginId}:pipeline:eek`;
      let frame = frames[uid];
      if (!frame) {
        let frame = frames[uid] = new Frame(m.redraw);
        frame.url(Routes.pipelineAnalyticsPath({plugin_id: pluginId, pipeline_name: currentPipeline}));
      }
      let dropdown = m("select", {
            onchange: function() {
              currentPipeline = $(this).val();
              frame.url(Routes.pipelineAnalyticsPath({plugin_id: pluginId, pipeline_name: currentPipeline}));
            }
          }, x)
      let iFrame = m(PluginiFrameWidget, {model: frames[uid], pluginId, uid})
      return (
        <span>
          {dropdown}
          {iFrame}
        </span>
      );
    }
    return {view, oninit};
  }

  module.exports = PipelineMetrics;

})();
